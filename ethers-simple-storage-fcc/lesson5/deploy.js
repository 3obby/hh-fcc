const ethers = require("ethers")
const fs = require("fs-extra")
require("dotenv").config()

async function main() {
    //http://127.0.0.1:7545
    console.log("Starting...")
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)

    // const encryptedJson = fs.readFileSync("./.encryptedKey.json");
    // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //   encryptedJson,
    //   process.env.PK_PASSWORD
    // );

    // wallet = await wallet.connect(provider);

    //unencrypted wallet/pk way:
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)
    const abi = fs.readFileSync("./simpleStorage_sol_SimpleStorage.abi", "utf8")
    const bin = fs.readFileSync("./simpleStorage_sol_SimpleStorage.bin", "utf8")
    const contractFactory = new ethers.ContractFactory(abi, bin, wallet)
    console.log("Deploying, please wait...")
    const contract = await contractFactory.deploy()
    const deploymentRx = await contract.deployTransaction.wait(1)
    console.log(`contract address: ${contract.address}`)
    console.log(deploymentRx)

    //manual tx below:
    // const nonce = await wallet.getTransactionCount();
    // const tx = {
    //   nonce: nonce,
    //   gasPrice: "20000000000",
    //   gasLimit: "1000000",
    //   to: null,
    //   value: "0",
    //   data: "0x608060405234801561001057600080fd5b50610ce4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806332612e0214610046578063626ccd4f146100625780637429ff7014610097575b600080fd5b610060600480360381019061005b91906105f9565b6100c7565b005b61007c6004803603810190610077919061071e565b6102e0565b60405161008e969594939291906107f9565b60405180910390f35b6100b160048036038101906100ac919061086f565b6104ed565b6040516100be91906108cb565b60405180910390f35b60006040518060c001604052808b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018561ffff1681526020018461ffff1681526020018315158152509080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908161020a9190610b21565b5060208201518160010190816102209190610b21565b5060408201518160020190816102369190610b21565b5060608201518160030160006101000a81548161ffff021916908361ffff16021790555060808201518160030160026101000a81548161ffff021916908361ffff16021790555060a08201518160030160046101000a81548160ff021916908315150217905550505060016000805490506102b19190610c22565b60018a8a6040516102c3929190610c95565b908152602001604051809103902081905550505050505050505050565b600081815481106102f057600080fd5b906000526020600020906004020160009150905080600001805461031390610944565b80601f016020809104026020016040519081016040528092919081815260200182805461033f90610944565b801561038c5780601f106103615761010080835404028352916020019161038c565b820191906000526020600020905b81548152906001019060200180831161036f57829003601f168201915b5050505050908060010180546103a190610944565b80601f01602080910402602001604051908101604052809291908181526020018280546103cd90610944565b801561041a5780601f106103ef5761010080835404028352916020019161041a565b820191906000526020600020905b8154815290600101906020018083116103fd57829003601f168201915b50505050509080600201805461042f90610944565b80601f016020809104026020016040519081016040528092919081815260200182805461045b90610944565b80156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b5050505050908060030160009054906101000a900461ffff16908060030160029054906101000a900461ffff16908060030160049054906101000a900460ff16905086565b600060018383604051610501929190610c95565b908152602001604051809103902054905092915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261054757610546610522565b5b8235905067ffffffffffffffff81111561056457610563610527565b5b6020830191508360018202830111156105805761057f61052c565b5b9250929050565b600061ffff82169050919050565b61059e81610587565b81146105a957600080fd5b50565b6000813590506105bb81610595565b92915050565b60008115159050919050565b6105d6816105c1565b81146105e157600080fd5b50565b6000813590506105f3816105cd565b92915050565b600080600080600080600080600060c08a8c03121561061b5761061a610518565b5b60008a013567ffffffffffffffff8111156106395761063861051d565b5b6106458c828d01610531565b995099505060208a013567ffffffffffffffff8111156106685761066761051d565b5b6106748c828d01610531565b975097505060408a013567ffffffffffffffff8111156106975761069661051d565b5b6106a38c828d01610531565b955095505060606106b68c828d016105ac565b93505060806106c78c828d016105ac565b92505060a06106d88c828d016105e4565b9150509295985092959850929598565b6000819050919050565b6106fb816106e8565b811461070657600080fd5b50565b600081359050610718816106f2565b92915050565b60006020828403121561073457610733610518565b5b600061074284828501610709565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561078557808201518184015260208101905061076a565b60008484015250505050565b6000601f19601f8301169050919050565b60006107ad8261074b565b6107b78185610756565b93506107c7818560208601610767565b6107d081610791565b840191505092915050565b6107e481610587565b82525050565b6107f3816105c1565b82525050565b600060c082019050818103600083015261081381896107a2565b9050818103602083015261082781886107a2565b9050818103604083015261083b81876107a2565b905061084a60608301866107db565b61085760808301856107db565b61086460a08301846107ea565b979650505050505050565b6000806020838503121561088657610885610518565b5b600083013567ffffffffffffffff8111156108a4576108a361051d565b5b6108b085828601610531565b92509250509250929050565b6108c5816106e8565b82525050565b60006020820190506108e060008301846108bc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061095c57607f821691505b60208210810361096f5761096e610915565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026109d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261099a565b6109e1868361099a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610a1e610a19610a14846106e8565b6109f9565b6106e8565b9050919050565b6000819050919050565b610a3883610a03565b610a4c610a4482610a25565b8484546109a7565b825550505050565b600090565b610a61610a54565b610a6c818484610a2f565b505050565b5b81811015610a9057610a85600082610a59565b600181019050610a72565b5050565b601f821115610ad557610aa681610975565b610aaf8461098a565b81016020851015610abe578190505b610ad2610aca8561098a565b830182610a71565b50505b505050565b600082821c905092915050565b6000610af860001984600802610ada565b1980831691505092915050565b6000610b118383610ae7565b9150826002028217905092915050565b610b2a8261074b565b67ffffffffffffffff811115610b4357610b426108e6565b5b610b4d8254610944565b610b58828285610a94565b600060209050601f831160018114610b8b5760008415610b79578287015190505b610b838582610b05565b865550610beb565b601f198416610b9986610975565b60005b82811015610bc157848901518255600182019150602085019450602081019050610b9c565b86831015610bde5784890151610bda601f891682610ae7565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c2d826106e8565b9150610c38836106e8565b9250828203905081811115610c5057610c4f610bf3565b5b92915050565b600081905092915050565b82818337600083830152505050565b6000610c7c8385610c56565b9350610c89838584610c61565b82840190509392505050565b6000610ca2828486610c70565b9150819050939250505056fea2646970667358221220b6022c540645c106bac2295c399125ead14b1e4ec654d04209c5d7d8a2aabeec64736f6c63430008110033",
    //   chainId: 1337,
    // };
    // const signedTx = await wallet.sendTransaction(tx);
    // await signedTx.wait(1);
    // console.log(signedTx);

    const getFavoriteCar = await contract.getFavoriteCar()
    console.log(`Current Favorite Car: ${getFavoriteCar}`)
    const response = await contract.setFavoriteCar("ND Miata w/ LS swap")
    await response.wait(1)
    const newFavoriteCar = await contract.getFavoriteCar()

    console.log(`newCar is ${newFavoriteCar}`)
}

main()
    .then(() => {
        console.log("Closing")
        process.exit(0)
    })
    .catch((error) => {
        console.log("Error Encountered:")
        console.error(error)
        process.exit(1)
    })
